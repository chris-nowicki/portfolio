---
import { navLinks } from '@/lib/site'

const mobileNavLinks = [{ href: '/', text: 'home' }, ...navLinks]
---

<div
  class="pointer-events-none fixed inset-0 z-50 translate-x-full bg-white opacity-0 transition-all duration-300 ease-in-out"
  id="mobile-menu">
  <div class="ml-12 mt-16 flex h-full flex-col">
    <ul class="list-none gap-8 text-3xl" id="menu-links">
      {
        mobileNavLinks.map((link) => (
          <li>
            <a
              href={link.href}
              class="group relative transition-colors duration-200 ease-in-out hover:text-foreground">
              /{link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </div>

  <button
    class="close fixed right-6 top-8 shadow-2xl focus:outline-none md:hidden"
    id="menu-close-btn">
    <span class="close-top"></span>
    <span class="close-bottom"></span>
  </button>
</div>

<script>
  import { isOpen } from '../store.js'

  function setupMobileMenu() {
    const mobileMenu = document.getElementById('mobile-menu')
    const menuCloseBtn = document.getElementById('menu-close-btn')
    const mobileMenuLinks = document.querySelectorAll('#menu-links a')
    const body = document.body

    if (!mobileMenu || !menuCloseBtn) return

    isOpen.subscribe((value) => {
      if (value) {
        requestAnimationFrame(() => {
          mobileMenu.classList.remove(
            'pointer-events-none',
            'translate-x-full',
            'opacity-0'
          )
          mobileMenu.classList.add(
            'pointer-events-auto',
            'translate-x-0',
            'opacity-100'
          )
          body.style.overflow = 'hidden'
        })
      } else {
        setTimeout(() => {
          requestAnimationFrame(() => {
            mobileMenu.classList.add(
              'pointer-events-none',
              'translate-x-full',
              'opacity-0'
            )
            mobileMenu.classList.remove(
              'pointer-events-auto',
              'translate-x-0',
              'opacity-100'
            )
            body.style.overflow = ''
          })
        }, 175)
      }
    })

    const handleClick = () => {
      isOpen.set(false)
    }

    menuCloseBtn.addEventListener('click', handleClick)
    mobileMenuLinks.forEach((link) => {
      link.addEventListener('click', handleClick)
    })

    return () => {
      menuCloseBtn.removeEventListener('click', handleClick)
      mobileMenuLinks.forEach((link) => {
        link.removeEventListener('click', handleClick)
      })
      body.style.overflow = ''
    }
  }

  let cleanup = setupMobileMenu()
  document.addEventListener('astro:after-swap', () => {
    if (cleanup) cleanup()
    cleanup = setupMobileMenu()
  })
</script>

<style>
  .close {
    cursor: pointer;
    width: 24px;
    height: 24px;
  }

  .close-top,
  .close-bottom {
    position: absolute;
    top: 0px;
    left: 0px;
    width: 24px;
    height: 2px;
    background: black;
    transform: rotate(0);
    transition: all 0.5s;
  }

  .close .close-top {
    transform: rotate(45deg) translateY(6px) translate(6px);
  }

  .close .close-bottom {
    transform: rotate(-45deg) translateY(6px) translate(-6px);
  }

  #mobile-menu {
    will-change: transform, opacity;
    backface-visibility: hidden;
    transition-property: transform, opacity;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
</style>
