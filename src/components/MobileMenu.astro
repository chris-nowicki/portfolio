---
import { navLinks } from '@/lib/site'

const mobileNavLinks = [{ href: '/', text: 'home' }, ...navLinks]
---

<div
  class="fixed inset-0 z-50 hidden bg-white transition-transform duration-300 ease-in-out"
  id="mobile-menu"
  role="dialog"
  aria-label="Mobile navigation"
  aria-hidden="true"
>
  <nav class="flex h-full flex-col items-center justify-center">
    <ul 
      class="flex list-none flex-col gap-4 text-7xl font-cursive" 
      id="menu-links"
      role="menubar"
    >
      {
        mobileNavLinks.map((link) => (
          <li role="none">
            <a
              href={link.href}
              class="group block relative transition-colors duration-200 ease-in-out hover:text-foreground focus:outline-none focus:text-foreground"
              role="menuitem"
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>

  <button
    class="fixed right-6 top-8 h-6 w-6 focus:outline-none md:hidden z-50"
    id="menu-close-btn"
    aria-label="Close mobile menu"
  >
    <span class="close-top"></span>
    <span class="close-bottom"></span>
  </button>
</div>

<script>
  import { isOpen } from '../store.js'

  const ANIMATION_DURATION = 300
  const MENU_VISIBLE_CLASSES = ['translate-x-0', 'opacity-100']
  const MENU_HIDDEN_CLASSES = ['translate-x-full', 'opacity-0']

  function setupMobileMenu() {
    const mobileMenu = document.getElementById('mobile-menu')
    const menuCloseBtn = document.getElementById('menu-close-btn')
    const mobileMenuLinks = document.querySelectorAll<HTMLAnchorElement>('#menu-links a')

    if (!mobileMenu || !menuCloseBtn) return

    const toggleMenu = (isVisible: boolean) => {
      mobileMenu.style.display = 'block'
      mobileMenu.setAttribute('aria-hidden', (!isVisible).toString())
      document.body.style.overflow = isVisible ? 'hidden' : ''

      requestAnimationFrame(() => {
        if (isVisible) {
          mobileMenu.classList.remove(...MENU_HIDDEN_CLASSES)
          mobileMenu.classList.add(...MENU_VISIBLE_CLASSES)
          menuCloseBtn.focus()
        } else {
          mobileMenu.classList.add(...MENU_HIDDEN_CLASSES)
          mobileMenu.classList.remove(...MENU_VISIBLE_CLASSES)
          setTimeout(() => {
            mobileMenu.style.display = 'none'
          }, ANIMATION_DURATION)
        }
      })
    }

    const closeMenu = () => isOpen.set(false)

    // Event Listeners
    const unsubscribe = isOpen.subscribe(toggleMenu)
    menuCloseBtn.addEventListener('click', closeMenu)
    mobileMenuLinks.forEach(link => link.addEventListener('click', closeMenu))

    // Keyboard navigation
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape' && isOpen.get()) {
        closeMenu()
      }
    }
    document.addEventListener('keydown', handleKeyDown)

    return () => {
      unsubscribe()
      menuCloseBtn.removeEventListener('click', closeMenu)
      mobileMenuLinks.forEach(link => link.removeEventListener('click', closeMenu))
      document.removeEventListener('keydown', handleKeyDown)
      document.body.style.overflow = ''
    }
  }

  let cleanup = setupMobileMenu()
  document.addEventListener('astro:after-swap', () => {
    cleanup?.()
    cleanup = setupMobileMenu()
  })
</script>

<style>
  #mobile-menu {
    will-change: transform, opacity;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
  }

  #menu-close-btn {
    cursor: pointer;
  }

  .close-top,
  .close-bottom {
    position: absolute;
    top: 50%;
    left: 0;
    width: 100%;
    height: 2px;
    background: black;
    transition: transform 0.5s ease;
  }

  .close-top {
    transform: rotate(45deg);
  }

  .close-bottom {
    transform: rotate(-45deg);
  }
</style>