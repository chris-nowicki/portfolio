---
import { BlogBackLink } from '@/components/React/BlogBackLink'
import Container from '@/components/Container.astro'
import PageLayout from '@/layouts/PageLayout.astro'
import { formatDate } from '@/utils/collection-dates'
import generateOgImageUrl from '@/utils/og-image'
import { readingTime } from '@/utils/reading-time'
import { Image } from 'astro:assets'
import { getCollection, render } from 'astro:content'

export async function getStaticPaths() {
  const posts = await getCollection('blog')
  return posts.map((post) => ({ params: { slug: post.id }, props: { post } }))
}

const { post } = Astro.props
const { Content } = await render(post)

const postDate = formatDate(post.data.date.toDateString())
const postReadTime = readingTime(post.rendered?.html ?? '')

const ogImageUrl = generateOgImageUrl({
  header: '/BLOG',
  description: post.data.title,
  readTime: postReadTime,
})
---

<PageLayout
  title={post.data.title}
  description={post.data.description}
  image={ogImageUrl}>
  <Container>
    <article class="pt-28 text-sm sm:pt-40 sm:text-base">
      <header class="mb-8 flex flex-col gap-2">
        <BlogBackLink client:load />

        <h1 class="mt-8 text-xl font-bold sm:text-4xl">{post.data.title}</h1>
        <span class="text-muted-foreground flex items-center gap-2 text-sm"
          >{postDate} | {postReadTime}</span
        >
        {
          post.data.image && (
            <Image
              src={post.data.image}
              alt={post.data.title}
              width={768}
              height={438}
              class="mt-3 rounded-lg"
            />
          )
        }
      </header>
      <div class="prose">
        <Content />
      </div>
      <div class="mt-16 mb-28">
        <BlogBackLink client:load />
      </div>
    </article>
  </Container>
</PageLayout>

<script>
  const blocks = document.querySelectorAll('pre:has(code)')

  blocks.forEach((block) => {
    if (navigator.clipboard) {
      const preBlock = block as HTMLElement
      preBlock.style.position = 'relative'

      const button = document.createElement('button')
      const copyButton = button as HTMLButtonElement
      copyButton.style.position = 'absolute'
      copyButton.style.top = '8px'
      copyButton.style.right = '8px'
      copyButton.style.padding = '4px'
      copyButton.style.background = 'transparent'
      copyButton.style.border = 'none'
      copyButton.style.cursor = 'pointer'

      const copyIcon = document.createElement('span')
      copyIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-copy"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"/><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/></svg>`

      const checkIcon = document.createElement('span')
      checkIcon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#4ade80" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-check"><polyline points="20 6 9 17 4 12"/></svg>`
      checkIcon.style.display = 'none'

      copyButton.appendChild(copyIcon)
      copyButton.appendChild(checkIcon)
      preBlock.appendChild(copyButton)

      copyButton.addEventListener('click', async () => {
        await copyCode(preBlock, copyIcon, checkIcon)
      })
    }
  })

  async function copyCode(
    block: HTMLElement,
    copyIcon: HTMLSpanElement,
    checkIcon: HTMLSpanElement
  ) {
    let code = block.querySelector('code')
    let text = code?.innerText

    try {
      await navigator.clipboard.writeText(text || '')

      // Hide copy icon, show check icon
      copyIcon.style.display = 'none'
      checkIcon.style.display = 'block'

      // Reset back to copy icon after 2 seconds
      setTimeout(() => {
        copyIcon.style.display = 'block'
        checkIcon.style.display = 'none'
      }, 2000)
    } catch (err) {
      console.error('Failed to copy code:', err)
    }
  }
</script>
